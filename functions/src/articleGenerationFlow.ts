import { defineFlow, generate } from '@genkit-ai/core';
import { gemini15Flash } from '@genkit-ai/googleai';
import { configureGenkit } from '@genkit-ai/core';
import { googleAI } from '@genkit-ai/googleai';
import { initializeApp } from 'firebase-admin/app';
import { getFirestore } from 'firebase-admin/firestore';
import { getStorage } from 'firebase-admin/storage';
import { v4 as uuidv4 } from 'uuid';
import * as path from 'path';
import * as admin from 'firebase-admin';

// Initialize Firebase Admin SDK
if (!admin.apps.length) {
  initializeApp();
}
const db = getFirestore();
const bucket = getStorage().bucket();

export const generateArticleFlow = defineFlow(
  {
    name: 'generateArticleFlow',
    inputSchema: {
      type: 'object',
      properties: {
        promptText: { type: 'string' },
        imageUris: { type: 'array', items: { type: 'string' } }, // Cloud Storage URIs
      },
      required: ['promptText', 'imageUris'],
    },
    outputSchema: {
      type: 'object',
      properties: {
        articleId: { type: 'string' },
        title: { type: 'string' },
        slug: { type: 'string' },
        htmlContent: { type: 'string' },
      },
    },
  },
  async (input) => {
    const { promptText, imageUris } = input;
    const articleId = uuidv4(); // Generate a unique ID for the article
    let articleSlug = ''; // Will be generated by AI, or derived from title

    const permanentImageUrls: string[] = [];
    const imageParts: any[] = []; // To hold image data for AI model

    // 1. Move images from temp to permanent storage
    for (const tempUri of imageUris) {
      const fileName = path.basename(tempUri);
      const permanentPath = `articles/${articleId}/images/${fileName}`;
      
      // Ensure the temp path is valid (starts with gs://)
      if (!tempUri.startsWith('gs://')) {
        throw new Error(`Invalid image URI: ${tempUri}`);
      }
      
      // Extract bucket name and file path from gs:// URI
      const uriParts = tempUri.substring(5).split('/');
      const bucketName = uriParts[0];
      const filePath = uriParts.slice(1).join('/');
      
      const tempFile = bucket.file(filePath);
      const permanentFile = bucket.file(permanentPath);

      await tempFile.move(permanentFile);
      const [url] = await permanentFile.getSignedUrl({
        action: 'read',
        expires: '03-09-2491', // Long expiry for public access
      });
      permanentImageUrls.push(url); // Store the public URL for HTML img src
      
      // For Gemini, we need to format images properly
      imageParts.push({
        media: {
          url: url,
          contentType: permanentFile.metadata?.contentType || 'image/jpeg'
        }
      });
    }

    // 2. Generate Article HTML using Gemini
    const prompt = `
      Based on the provided text and images, generate a full HTML article.
      The article must include a clear <title> tag (inside <html><head>),
      a unique article slug, and the article content itself.
      Integrate the images meaningfully into the HTML content using <img> tags,
      referencing them by their public URLs provided.
      For the slug, use a lowercase, hyphenated version of the main article title.
      The response must be only valid JSON with this exact structure:
      {
        "title": "Your Article Title",
        "slug": "your-article-slug",
        "htmlContent": "<html><head><title>Your Article Title</title></head><body><h1>Your Article Title</h1><p>...</p><img src='...' /></body></html>"
      }
      
      User prompt: ${promptText}
    `;

    const response = await generate({
      model: gemini15Flash,
      prompt: prompt,
      config: {
        maxOutputTokens: 8192,
        temperature: 0.7,
      }
    });

    // Parse the AI's JSON response
    let aiOutput;
    try {
      aiOutput = JSON.parse(response.text());
    } catch (error) {
      // Fallback if JSON parsing fails
      const responseText = response.text();
      const titleMatch = responseText.match(/<title>(.*?)<\/title>/i);
      const title = titleMatch ? titleMatch[1] : 'Generated Article';
      const slug = title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-|-$/g, '');
      
      aiOutput = {
        title: title,
        slug: slug,
        htmlContent: responseText
      };
    }
    
    articleSlug = aiOutput.slug; // Get the AI-generated slug

    // 3. Save to Cloud Firestore
    await db.collection('articles').doc(articleId).set({
      articleId: articleId,
      title: aiOutput.title,
      slug: articleSlug,
      htmlContent: aiOutput.htmlContent,
      permanentImageUrls: permanentImageUrls, // Store these for reference/future use
      status: 'draft', // Initial status
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      updatedAt: admin.firestore.FieldValue.serverTimestamp(),
    });

    // 4. Return generated data
    return {
      articleId: articleId,
      title: aiOutput.title,
      slug: articleSlug,
      htmlContent: aiOutput.htmlContent,
    };
  }
);